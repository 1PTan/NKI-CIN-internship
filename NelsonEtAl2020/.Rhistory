knitr::opts_chunk$set(
echo = TRUE, warning=FALSE, message = FALSE, dpi = 300, error = FALSE
# fig.width = 10, fig.height = 6, output: html_notebook
)
# install.packages("BiocManager") #(only if you do not have BiocManager)
#BiocManager::install("DropletUtils")
# library(DropletUtils)
# install.packages("Seurat")
library(Seurat)
# install.packages("sparseMatrixStats")
library(sparseMatrixStats)
# install.packages("tidyverse")
library(tidyverse)
library(readxl)
library(plotly)
library(GEOquery)
source(file.path(dirname(getwd()), "Helper_functions.R"))
select = dplyr::select
rename = dplyr::rename
export = params$export
# generate output dir path named data
source.output.dir <- file.path("output_sc")
Seurat_object_name <- "scDarmanis"
barcodes <- read.table("data/E-GEOD-84465.aggregated_filtered_counts.mtx_cols")
genes <- read.table("data/E-GEOD-84465.aggregated_filtered_counts.mtx_rows")
design <- read.table("data/ExpDesign-E-GEOD-84465.tsv", sep = "\t", header = TRUE)
#GEO data
matrix_geo <- read.table("data/GSE84465_GBM_All_data.csv", sep = " ")
gse=getGEO(filename="data/GSE84465_series_matrix.txt.gz")
gse=getGEO(filename="data/GSE84465_series_matrix.txt.gz")
GEO_metadata <- gse@phenoData@data
View(barcodes)
View(genes)
View(matrix_geo)
matrix_geo[1:5, 1:5]
knitr::opts_chunk$set(
echo = TRUE, warning=FALSE, message = FALSE, dpi = 300, error = FALSE
# fig.width = 10, fig.height = 6, output: html_notebook
)
# install.packages("BiocManager") #(only if you do not have BiocManager)
#BiocManager::install("DropletUtils")
# library(DropletUtils)
# install.packages("Seurat")
library(Seurat)
# install.packages("sparseMatrixStats")
library(sparseMatrixStats)
# install.packages("tidyverse")
library(tidyverse)
library(readxl)
library(plotly)
library(GEOquery)
source(file.path(dirname(getwd()), "Helper_functions.R"))
select = dplyr::select
rename = dplyr::rename
sum(colnames(matrix_geo) %in% GEO_metadata$description.1)
# Remove first character X from colnames
sum(substring(colnames(matrix_geo), 2) %in% GEO_metadata$description.1)
colnames(matrix_geo) <- substring(colnames(matrix_geo), 2)
summary(design %>% mutate_if(is.character, as.factor))
colnames(design)
scAtlas_metadata <- design %>% select(-c(Sample.Characteristic.Ontology.Term.organism., Sample.Characteristic.Ontology.Term.individual.,
Sample.Characteristic.Ontology.Term.age., Sample.Characteristic.Ontology.Term.biopsy.site., Sample.Characteristic.Ontology.Term.individual., Sample.Characteristic.Ontology.Term.organism.part., Sample.Characteristic.Ontology.Term.immunophenotype., Sample.Characteristic.Ontology.Term.single.cell.quality., Factor.Value.Ontology.Term.inferred.cell.type...ontology.labels., Factor.Value.Ontology.Term.single.cell.identifier.,
Factor.Value.Ontology.Term.biopsy.site., Factor.Value.Ontology.Term.single.cell.identifier.)
)
colnames(GEO_metadata)
colnames(scAtlas_metadata)
metadata <- GEO_metadata %>% select(c(title, geo_accession, description.1, 'cell type:ch1', 'diagnosis:ch1', 'neoplastic:ch1', 'patient id:ch1', 'tissue:ch1')) %>% left_join(scAtlas_metadata %>% mutate(title = Factor.Value.single.cell.identifier.), by = "title")
map <- colnames(matrix_geo) %>% as.data.frame() %>% cbind(metadata %>% select(description.1, title, Assay, geo_accession))
sum(map$description.1 == map$.)
colnames(matrix_geo) <- map$geo_accession
metadata %>% filter(!Assay %in% barcodes$V1)
# remove last 5 columns, information about mapping, not gene counts
matrix_geo[23461:23465 ,1:4]
# remove the 1 cell that does not have scAtlas metadata
metadata %>% filter(is.na(Assay))
which((colnames(matrix_geo) == "GSM2245437") != 0)
data = as.matrix(matrix_geo[1:23460,-1993])
dim(data)
knitr::opts_chunk$set(
echo = TRUE, warning=FALSE, message = FALSE, dpi = 300, error = FALSE
# fig.width = 10, fig.height = 6, output: html_notebook
)
# install.packages("BiocManager") #(only if you do not have BiocManager)
#BiocManager::install("DropletUtils")
# library(DropletUtils)
# install.packages("Seurat")
library(Seurat)
# install.packages("sparseMatrixStats")
library(sparseMatrixStats)
# install.packages("tidyverse")
library(tidyverse)
library(readxl)
library(plotly)
library(GEOquery)
source(file.path(dirname(getwd()), "Helper_functions.R"))
select = dplyr::select
rename = dplyr::rename
# barcodes <- read.table("data/E-GEOD-84465.aggregated_filtered_counts.mtx_cols")
# genes <- read.table("data/E-GEOD-84465.aggregated_filtered_counts.mtx_rows")
# matrix <- read.table("data/E-MTAB-8410.aggregated_filtered_counts.mtx", sep = "\ ", header = TRUE, fill = TRUE)
# matrix <- read.table("data/E-GEOD-84465.aggregated_filtered_counts.mtx", sep = "\ ", skip = 2)
design <- read.table("data/ExpDesign-E-GEOD-84465.tsv", sep = "\t", header = TRUE)
#GEO data
matrix_geo <- read.table("data/GSE84465_GBM_All_data.csv", sep = " ")
knitr::opts_chunk$set(
echo = TRUE, warning=FALSE, message = FALSE, dpi = 300, error = FALSE
# fig.width = 10, fig.height = 6, output: html_notebook
)
# install.packages("BiocManager") #(only if you do not have BiocManager)
#BiocManager::install("DropletUtils")
# library(DropletUtils)
# install.packages("Seurat")
library(Seurat)
# install.packages("sparseMatrixStats")
library(sparseMatrixStats)
# install.packages("tidyverse")
library(tidyverse)
library(readxl)
library(plotly)
library(GEOquery)
source(file.path(dirname(getwd()), "Helper_functions.R"))
select = dplyr::select
rename = dplyr::rename
# barcodes <- read.table("data/E-GEOD-84465.aggregated_filtered_counts.mtx_cols")
# genes <- read.table("data/E-GEOD-84465.aggregated_filtered_counts.mtx_rows")
# matrix <- read.table("data/E-MTAB-8410.aggregated_filtered_counts.mtx", sep = "\ ", header = TRUE, fill = TRUE)
# matrix <- read.table("data/E-GEOD-84465.aggregated_filtered_counts.mtx", sep = "\ ", skip = 2)
design <- read.table("data/ExpDesign-E-GEOD-84465.tsv", sep = "\t", header = TRUE)
#GEO data
matrix_geo <- read.table("data/GSE84465_GBM_All_data.csv", sep = " ")
# matrix_geo <- read.csv2("data/GSE84465_GBM_All_data_fixed.csv")
gse=getGEO(filename="data/GSE84465_series_matrix.txt.gz")
GEO_metadata <- gse@phenoData@data
sum(colnames(matrix_geo) %in% GEO_metadata$description.1)
# Remove first character X from colnames
sum(substring(colnames(matrix_geo), 2) %in% GEO_metadata$description.1)
colnames(matrix_geo) <- substring(colnames(matrix_geo), 2)
summary(design %>% mutate_if(is.character, as.factor))
colnames(design)
scAtlas_metadata <- design %>% select(-c(Sample.Characteristic.Ontology.Term.organism., Sample.Characteristic.Ontology.Term.individual.,
Sample.Characteristic.Ontology.Term.age., Sample.Characteristic.Ontology.Term.biopsy.site., Sample.Characteristic.Ontology.Term.individual., Sample.Characteristic.Ontology.Term.organism.part., Sample.Characteristic.Ontology.Term.immunophenotype., Sample.Characteristic.Ontology.Term.single.cell.quality., Factor.Value.Ontology.Term.inferred.cell.type...ontology.labels., Factor.Value.Ontology.Term.single.cell.identifier.,
Factor.Value.Ontology.Term.biopsy.site., Factor.Value.Ontology.Term.single.cell.identifier.)
)
colnames(GEO_metadata)
colnames(scAtlas_metadata)
metadata <- GEO_metadata %>% select(c(title, geo_accession, description.1, 'cell type:ch1', 'diagnosis:ch1', 'neoplastic:ch1', 'patient id:ch1', 'tissue:ch1')) %>% left_join(scAtlas_metadata %>% mutate(title = Factor.Value.single.cell.identifier.), by = "title")
map <- colnames(matrix_geo) %>% as.data.frame() %>% cbind(metadata %>% select(description.1, title, Assay, geo_accession))
sum(map$description.1 == map$.)
colnames(matrix_geo) <- map$geo_accession
metadata %>% filter(!Assay %in% barcodes$V1)
